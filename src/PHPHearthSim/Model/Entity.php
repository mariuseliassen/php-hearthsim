<?php

/**
 * PHPHearthSim - A Hearthstone simulator written in PHP
 *
 * @author:     Switchback <switchback@exchange.no>
 * @copyright   Copyright (C) 2015 Switchback
 * @date: 13 12 2015
 */
namespace PHPHearthSim\Model;

use PHPHearthSim\Exception\InvalidEntityEventException;
use PHPHearthSim\Exception\MissingTypeTraitException;
use PHPHearthSim\Model\EntityAdjustment;
use PHPHearthSim\Model\Board;
use PHPHearthSim\Event\EntitySubscriber;
use PHPHearthSim\Event\EntityEvent;
use PHPHearthSim\Event\Entity\EntityCreateEvent;

/**
 * Main game entity
 * This is the base class in which all other game entites are derived from.
 *
 * @class Entity
 * @property-read \PHPHearthSim\Model\Board $board get the board reference
 * @property-read int $id get the entity unique identifier
 * @property \PHPHearthSim\Model\EntityyAdjustment[] $adjustments set/get entity adjustments
 * @property mixed $lastSignalReceived set/get the last signal received
 * @property-read string $rarity get entity rarity
 * @property-read string $name get entity name
 * @property-read string $rarity get entity rarity
 * @property-read int $baseCost get entity base cost
 * @property-read int $baseHealth get entity base health
 * @property-read int $baseAttack get entity base attack
 * @property-read int $cost get entity cost
 * @property-read int $health get entity health
 * @property-read int $attack get entity attack
 */
abstract class Entity extends EntityEvents implements EntityInterface {

    /**
     * Reference to the game board (for events)
     *
     * @var \PHPHearthSim\Model\Board
     */
    protected $board;

    /**
     * Unique id that is generated by the board
     *
     * @var string
     */
    protected $id;

    /**
     * List of adjustments made to a entity
     *
     * @var \PHPHearthSim\Model\EntityyAdjustment[]
     */
    protected $adjustments = [];


    /**
     * The last signal that was received by another entity
     * Used mostly for debugging
     *
     * @var mixed
     */
    protected $lastSignalReceived = [
        'signal' => null,
        'event'  => null
    ];

    /**
     * Entity rarity
     *
     * @var string
     */
    protected $rarity;

    /**
     * Entity name
     *
     * @var string
     */
    protected $name;

    /**
     * The base cost of a entity (before reduction or penalties from other adjustments)
     *
     * @var int
     */
    protected $baseCost;

    /**
     * The base health of a entity (before reduction or penalties from other adjustments)
     *
     * @var int
     */
    protected $baseHealth;

    /**
     * The base attack of a entity (before reduction or penalties from other adjustments)
     * @var int
     */
    protected $baseAttack;

    /**
     * The current calculated cost of entity (after reduction or penalties from other adjustments)
     *
     * @var int
     */
    protected $cost;

    /**
     * The current calculated attack of entity (after reduction or penalties from other adjustments)
     *
     * @var int
     */
    protected $attack;

    /**
     * The current calculated health of entity (after reduction or penalties from other adjustments)
     *
     * @var int
     */
    protected $health;

    /**
     * Constructor
     * Allow to set some options like adjustments on initialization
     *
     * @param array $options Options to set during initialization
     */
    public function __construct(array $options = []) {
        // Assign the board
        if (isset($options['board'])) {
            $this->board = $options['board'];
            // Generate a unique id for the entity
            $this->id = $this->board->generateEntityId();
        }

        // Apply adjustments if passed
        if (isset($options['adjustments'])) {
            $this->adjustments = $options['adjustments'];
        }

        // Assign rarity from trait
        $this->rarity = $this->getRarityFromTrait();
        // Initialize events
        $this->subscribe();
        // Signal that we were created
        $this->emit(EntityEvent::EVENT_ENTITY_CREATE);
    }

    /**
     * Get the board reference
     *
     * @return \PHPHearthSim\Model\Board
     */
    public function getBoard() {
        return $this->board;
    }

    /**
     * Get the entity unique identifier set by the board
     *
     * @return int
     */
    public function getId() {
        return $this->id;
    }

    /**
     * Create a subscriber for the entity and listen to events
     *
     * @return \PHPHearthSim\Model\Entity
     */
    private function subscribe() {
        // Make sure we have a valid board
        if (!$this->board instanceof Board) {
            return $this;
        }

        // Create entity subscriber for this entity
        $entitySubscriber = new EntitySubscriber();
        $entitySubscriber->setEntity($this);

        // Add the subscriber
        $this->getBoard()->subscribe($entitySubscriber);

        return $this;
    }

    /**
     * Emit a signal to board
     *
     * @param string $eventName
     * @param mixed $eventData
     *
     * @return \PHPHearthSim\Model\Entity
     */
    public function emit($eventName, $eventData = null) {
        // Only send signal if we have a board
        if ($this->board instanceof Board) {

            switch ($eventName) {

                // When an entity is created
                case EntityEvent::EVENT_ENTITY_CREATE:
                    $event = new EntityCreateEvent($this);
                    break;

                // Invalid event
                default:
                    throw new InvalidEntityEventException($eventName . ' is not a valid entity event signal');
                    break;
            }

            // Send the event signal to the board emitter
            $this->board->emit($eventName, $event);

        }

        return $this;
    }

    /**
     * Set the entity adjustments
     *
     * @param \PHPHearthSim\Model\EntityyAdjustment[] $adjustments
     * @return \PHPHearthSim\Model\Entity
     */
    public function setAdjustments(array $adjustments) {
        $this->adjustments = $adjustments;

        return $this;
    }

    /**
     * Get the entity adjustments
     *
     * @return \PHPHearthSim\Model\EntityyAdjustment[]
     */
    public function getAdjustments() {
        return $this->adjustments;
    }

    /**
     * Add adjustment to list
     *
     * @param \PHPHearthSim\Model\EntityAdjustment $adjustment
     * @return \PHPHearthSim\Model\Entity
     */
    public function addAdjustment(EntityAdjustment $adjustment) {
        $this->adjustments[] = $adjustment;

        return $this;
    }

    /**
     * Set the last signal received
     *
     * @param string $eventName
     * @param \PHPHearthSim\Event\EntityEvent $event
     * @return \PHPHearthSim\Model\Entity
     */
    public function setLastSignalReceived($eventName, EntityEvent $event) {
        $this->lastSignalReceived = ['signal' => $eventName, 'event' => $event];

        return $this;
    }

    /**
     * Get the last signal received
     *
     * @return mixed
     */
    public function getLastSignalReceived() {
        return $this->lastSignalReceived;
    }

    /**
     * Get the entity name
     *
     * @return string
     */
    public function getName() {
        return $this->name;
    }

    /**
     * Get the entity base mana cost
     *
     * @return int
     */
    public function getBaseCost() {
        return $this->baseCost;
    }

    /**
     * Get the entity base health
     *
     * @return int
     */
    public function getBaseHealth() {
        return $this->baseHealth;
    }

    /**
     * Get the entity base attack
     *
     * @return int
     */
    public function getBaseAttack() {
        return $this->baseAttack;
    }

    /**
     * Get the entity type
     *
     * @return string
     */
    public function getRarity() {
        return $this->rarity;
    }

    /**
     * Get the current entity mana cost
     *
     * @return int
     */
    public function getCost() {
        return $this->cost;
    }

    /**
     * Get the current entity health
     *
     * @return int
     */
    public function getHealth() {
        return $this->health;
    }

    /**
     * Get the current entity attack
     *
     * @return int
     */
    public function getAttack() {
        return $this->attack;
    }

    /**
     * Get the rarity from trait
     *
     * @throws \PHPHearthSim\Exception\MissingRarirytTraitException When entity is not initialized with a Rarity trait
     */
    protected function getRarityFromTrait()  {
        throw new MissingTypeTraitException('Entity is missing rarity trait');
    }

}